// Test generated by RoostGPT for test int-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Reflection;
using Newtonsoft.Json;

namespace YourNamespace
{
    [TestFixture]
    public class YourTestClass
    {
        [Test]
        public void TestParentAccessor_GetJsonValue_de904c7be5()
        {
            // Arrange
            IParentAccessorAcceptor tObj = new ParentAccessorAcceptor();
            tObj.Name = "John Doe";
            
            ParentAccessor parent = new ParentAccessor();
            parent.SetTarget(tObj);
            
            YourClass yourClass = new YourClass(parent);

            // Act
            string jsonString = yourClass.GetJsonValue("Name");

            // Assert
            Assert.AreEqual("{\"Name\":\"John Doe\"}", jsonString);
        }

        [Test]
        public void TestParentAccessor_GetJsonValue_de904c7be5_InvalidName()
        {
            // Arrange
            IParentAccessorAcceptor tObj = new ParentAccessorAcceptor();
            tObj.Name = "John Doe";
            
            ParentAccessor parent = new ParentAccessor();
            parent.SetTarget(tObj);
            
            YourClass yourClass = new YourClass(parent);

            // Act
            string jsonString = yourClass.GetJsonValue("InvalidName");

            // Assert
            Assert.AreEqual("{}", jsonString);
        }
    }

    public interface IParentAccessorAcceptor
    {
        string Name { get; set; }
    }

    public class ParentAccessor : IParentAccessor
    {
        private WeakReference<IParentAccessorAcceptor> target;

        public void SetTarget(IParentAccessorAcceptor obj)
        {
            target = new WeakReference<IParentAccessorAcceptor>(obj);
        }

        public bool TryGetTarget(out IParentAccessorAcceptor obj)
        {
            return target.TryGetTarget(out obj);
        }
    }

    public interface IParentAccessor
    {
        bool TryGetTarget(out IParentAccessorAcceptor obj);
    }

    public class YourClass
    {
        private ParentAccessor parent;
        private Type typeinfo;

        public YourClass(ParentAccessor parent)
        {
            this.parent = parent;
            this.typeinfo = typeof(IParentAccessorAcceptor);
        }

        public string GetJsonValue(string name)
        {
            if (parent.TryGetTarget(out IParentAccessorAcceptor tobj))
            {
                PropertyInfo? propinfo = typeinfo.GetProperty(name);
                object? obj = propinfo?.GetValue(tobj);

                return JsonConvert.SerializeObject(obj, new JsonSerializerSettings()
                {
                    NullValueHandling = NullValueHandling.Ignore
                });
            }

            return "{}";
        }
    }

    public class ParentAccessorAcceptor : IParentAccessorAcceptor
    {
        public string Name { get; set; }
    }
}
