// Test generated by RoostGPT for test int-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using System.Reflection;

namespace YourNamespace.Tests
{
    [TestFixture]
    public class ParentAccessorTests
    {
        // Test case for success case
        [Test]
        public void TestParentAccessor_SetValue_Success()
        {
            // Arrange
            IParentAccessorAcceptorMock parentMock = new IParentAccessorAcceptorMock();
            ParentAccessor parentAccessor = new ParentAccessor(parentMock);

            // Act
            parentAccessor.SetValue("PropertyName", "Property Value");

            // Assert
            Assert.AreEqual("Property Value", parentMock.PropertyName);
        }

        // Test case for property not found
        [Test]
        public void TestParentAccessor_SetValue_PropertyNotFound()
        {
            // Arrange
            IParentAccessorAcceptorMock parentMock = new IParentAccessorAcceptorMock();
            ParentAccessor parentAccessor = new ParentAccessor(parentMock);

            // Act & Assert
            Assert.Throws<NullReferenceException>(() =>
            {
                parentAccessor.SetValue("InvalidPropertyName", "Property Value");
            });
        }
    }

    public interface IParentAccessorAcceptor
    {
        bool IsSettingValue { get; set; }
    }

    public class IParentAccessorAcceptorMock : IParentAccessorAcceptor
    {
        public bool IsSettingValue { get; set; } = false;
        public string? PropertyName { get; set; }
    }

    public class ParentAccessor
    {
        private readonly WeakReference<IParentAccessorAcceptor> parent;

        public ParentAccessor(IParentAccessorAcceptor parent)
        {
            this.parent = new WeakReference<IParentAccessorAcceptor>(parent);
        }

        public void SetValue(string name, object value)
        {
            if (parent.TryGetTarget(out IParentAccessorAcceptor tobj))
            {
                PropertyInfo? propinfo = tobj.GetType().GetProperty(name);
                tobj.IsSettingValue = true;
                propinfo?.SetValue(tobj, value);
                tobj.IsSettingValue = false;
            }
        }
    }
}
