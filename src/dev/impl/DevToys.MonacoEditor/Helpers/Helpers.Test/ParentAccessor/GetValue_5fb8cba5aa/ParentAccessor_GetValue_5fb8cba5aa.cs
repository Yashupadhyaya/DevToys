// Test generated by RoostGPT for test int-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System.Reflection;

namespace TestNamespace
{
    [TestFixture]
    public class TestClass
    {
        [Test]
        public void TestParentAccessor_GetValue_Success()
        {
            // Arrange
            var parent = new MockParentAccessor();
            var accessor = new ParentAccessor(parent);

            // Act
            var result = accessor.GetValue("PropertyName");

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual("ExpectedValue", result);
        }

        [Test]
        public void TestParentAccessor_GetValue_NullParent()
        {
            // Arrange
            var parent = new MockParentAccessor();
            var accessor = new ParentAccessor(null);

            // Act
            var result = accessor.GetValue("PropertyName");

            // Assert
            Assert.IsNull(result);
        }

        [Test]
        public void TestParentAccessor_GetValue_NullPropertyInfo()
        {
            // Arrange
            var parent = new MockParentAccessor();
            var accessor = new ParentAccessor(parent);

            // Act
            var result = accessor.GetValue("InvalidPropertyName");

            // Assert
            Assert.IsNull(result);
        }
    }

    public interface IParentAccessorAcceptor
    {
        bool TryGetTarget(out IParentAccessorAcceptor target);
    }

    public class ParentAccessor
    {
        private readonly IParentAccessorAcceptor parent;
        private readonly TypeInfo typeinfo;

        public ParentAccessor(IParentAccessorAcceptor parent)
        {
            this.parent = parent;
            typeinfo = typeof(IParentAccessorAcceptor).GetTypeInfo();
        }

        public object? GetValue(string name)
        {
            if (parent.TryGetTarget(out IParentAccessorAcceptor tobj))
            {
                PropertyInfo? propinfo = typeinfo.GetProperty(name);
                return propinfo?.GetValue(tobj);
            }

            return null;
        }
    }

    public class MockParentAccessor : IParentAccessorAcceptor
    {
        public bool TryGetTarget(out IParentAccessorAcceptor target)
        {
            target = this;
            return true;
        }

        public string PropertyName { get; } = "ExpectedValue";
    }
}
