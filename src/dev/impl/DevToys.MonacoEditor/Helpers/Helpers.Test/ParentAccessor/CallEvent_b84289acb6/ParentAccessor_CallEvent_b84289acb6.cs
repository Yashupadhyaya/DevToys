// Test generated by RoostGPT for test unt-test using AI Type Azure Open AI and AI Model roost-gpt

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace TestNamespace
{
    [TestClass]
    public class TestClass
    {
        [TestMethod]
        public async Task TestCallEvent_ExistingEvent_ReturnsString()
        {
            // Arrange
            var eventDictionary = new Dictionary<string, Func<string[], string>>()
            {
                ["event1"] = (parameters) => "Hello, " + parameters[0],
                ["event2"] = (parameters) => "This is event 2."
            };
            var methodName = "event1";
            var parameters = new string[] { "John" };

            var target = new TestClass();

            // Act
            var result = await target.CallEvent(methodName, parameters);

            // Assert
            Assert.AreEqual("Hello, John", result);
        }

        [TestMethod]
        public async Task TestCallEvent_NonExistingEvent_ReturnsNull()
        {
            // Arrange
            var eventDictionary = new Dictionary<string, Func<string[], string>>();
            var methodName = "event3";
            var parameters = new string[] { "John" };

            var target = new TestClass();

            // Act
            var result = await target.CallEvent(methodName, parameters);

            // Assert
            Assert.IsNull(result);
        }
    }

    public class TestClass
    {
        private Dictionary<string, Func<string[], string>> events;

        public async Task<string> CallEvent(string name, string[] parameters)
        {
            if (events is not null && events.ContainsKey(name))
            {
                return events[name]?.Invoke(parameters);
            }

            return null;
        }
    }
}
