// Test generated by RoostGPT for test int-test using AI Type Azure Open AI and AI Model roost-gpt

using NUnit.Framework;
using System;
using Windows.ApplicationModel.Core;
using Windows.Foundation.Metadata;
using Windows.UI;
using Windows.UI.ViewManagement;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Media;

namespace YourNamespace
{
    [TestFixture]
    public class ThemeListenerTests
    {
        private ThemeListener _themeListener;
        private AccessibleObject _accessibleObject;

        [SetUp]
        public void Setup()
        {
            _themeListener = new ThemeListener();
            _accessibleObject = new AccessibleObject();
        }

        [Test]
        public void TestThemeListener_UpdateProperties_WhiteContrastSchemeShouldSetLightTheme()
        {
            // Arrange
            _accessibleObject.HighContrast = true;
            _accessibleObject.HighContrastScheme = "White";

            // Act
            _themeListener.UpdateProperties();

            // Assert
            Assert.IsFalse(_themeListener.IsHighContrast);
            Assert.AreEqual(ApplicationTheme.Light, _themeListener.CurrentTheme);
            Assert.AreEqual("#FFFFFF", _themeListener.AccentColorHtmlHex);
        }

        [Test]
        public void TestThemeListener_UpdateProperties_NotWhiteContrastSchemeShouldSetSystemTheme()
        {
            // Arrange
            _accessibleObject.HighContrast = false;
            _accessibleObject.HighContrastScheme = "Black";

            // Assume
            bool expectedHighContrast = _accessibleObject.HighContrast;
            ApplicationTheme expectedCurrentTheme = ((FrameworkElement)Window.Current.Content).ActualTheme == ElementTheme.Dark ? ApplicationTheme.Dark : ApplicationTheme.Light;
            string expectedAccentColorHtmlHex = ToHtmlHex(((SolidColorBrush)Application.Current.Resources["TextControlSelectionHighlightColor"]).Color);

            // Act
            _themeListener.UpdateProperties();

            // Assert
            Assert.AreEqual(expectedHighContrast, _themeListener.IsHighContrast);
            Assert.AreEqual(expectedCurrentTheme, _themeListener.CurrentTheme);
            Assert.AreEqual(expectedAccentColorHtmlHex, _themeListener.AccentColorHtmlHex);
        }
  
        private string ToHtmlHex(Color color)
        {
            return $"#{color.R:X2}{color.G:X2}{color.B:X2}";
        }
    }

    public class ThemeListener
    {
        public bool IsHighContrast { get; private set; }
        public ApplicationTheme CurrentTheme { get; private set; }
        public string AccentColorHtmlHex { get; private set; }
        private AccessibleObject _accessible;

        public ThemeListener()
        {
            _accessible = new AccessibleObject();
        }

        public void UpdateProperties()
        {
            // TODO: Not sure if HighContrastScheme names are localized?
            if (_accessible.HighContrast && _accessible.HighContrastScheme.IndexOf("white", StringComparison.OrdinalIgnoreCase) != -1)
            {
                // If our HighContrastScheme is ON & a lighter one, then we should remain in 'Light' theme mode for Monaco Themes Perspective
                IsHighContrast = false;
                CurrentTheme = ApplicationTheme.Light;
            }
            else
            {
                // Otherwise, we just set to what's in the system as we'd expect.
                IsHighContrast = _accessible.HighContrast;
                CurrentTheme = ((FrameworkElement)Window.Current.Content).ActualTheme == ElementTheme.Dark ? ApplicationTheme.Dark : ApplicationTheme.Light;
            }

            AccentColorHtmlHex = ToHtmlHex(((SolidColorBrush)Application.Current.Resources["TextControlSelectionHighlightColor"]).Color);

            ThemeChanged?.Invoke(this);
        }

        public delegate void ThemeChangedEventHandler(ThemeListener sender);
        public event ThemeChangedEventHandler ThemeChanged;
    }

    public class AccessibleObject
    {
        public bool HighContrast { get; set; }
        public string HighContrastScheme { get; set; }
    }
}
